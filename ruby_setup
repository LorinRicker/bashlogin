#!/usr/bin/env bash

# $HOME/bin/login/ruby_setup
# Lorin Ricker: set up Ruby environment & commands

shF="$( basename ${0#-} ) - ruby_setup"
Ident="${shF}  # (LMR version 5.00 of 10/15/2012)"
[ "$DEBUGMODE" = "1" ] && echo "%login-I, ${Ident}"

# =========================

# Set for latest version of Ruby (etc.; v1.8 and v1.9.1 installed) --
# may find:  a) /usr/bin/ruby -> /etc/alternatives/ruby -> /usr/bin/rubyX.X.X
#               plus one or more version-specific Ruby executables
#  or only:  b) /usr/bin/rubyX.X.X
RB="/usr/bin/ruby"
RALT="/etc/alternatives/ruby"
RUBY=$( ls --format=single-column $RB* | sort -r | head -n 1 )

if [ -f "$RUBY" ]; then

  RBV=${RUBY##$RB}  # strip path and "ruby" to get version#
  alias ruby="$RUBY"
  alias rubi="${RUBY} -I ~/projects/ruby"
  alias  gem="/usr/bin/gem${RBV}"
  alias  irb="/usr/bin/irb${RBV}"
  alias   ri="/usr/bin/ri${RBV}"
  alias rdoc="/usr/bin/rdoc${RBV}"
  deflogical "rlb" "/usr/lib/ruby/${RBV}/"
  echo "%${shF}-I-version, Ruby version is ${RBV} -- pry, irb, gem, ri, rdoc"

  # Check and untangle Ruby-upgrade's dumb insistence on setting sym-links to
  # old and obsolete version(s), e.g., to 1.8 instead of latest 1.9.x:
  Rsymlink1=$( readlink "$RB" )
  Rsymlink2=$( readlink "$Rsymlink1" )
  RSLV=${Rsymlink2##$RB}
  if [[ "$RSLV" != "$RBV" ]]; then
    echo "%${shF}-E-VMISMATCH, Ruby version mismatch: '$RSLV' instead of '$RBV'"
    echo "  ...fix: run \". ~/bin/setRubyVersion $RBV\" to correct this problem"
    . ~/bin/setRubyVersion --howto  # output help-text/explanation
  fi

  # Default Ruby search path is PATH, but
  # "$ ruby -S ..." forces use of RUBYPATH --
  export RUBYPATH=~/bin:~/projects/ruby:~/projects
  export  RUBYLIB=~/bin:~/projects/ruby:~/projects:~/.gem/ruby/${RBV}/bin
  export     PATH=~/bin:~/projects/ruby:~/projects:~/.gem/ruby/${RBV}/bin:$PATH

else
  echo "%${shF}-E-fnf, Ruby not installed (\"$RB\")"

fi

return 0  # don't: exit 0
