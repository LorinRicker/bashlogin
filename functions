#!/usr/bin/env bash

# $HOME/bin/login/functions
# Lorin Ricker: bash functions

shF="$( basename ${0#-} ) - functions"
Ident="${shF}  # (LMR version 5.09 of 01/28/2017)"
[ "$DEBUGMODE" = "1" ] && echo "%login-I, ${Ident}"

# -----
# Moved definition of function cd() to its own file cd
# so that it can be (re)invoked following RVM's setup
# at the end of bashrc -- RVM imposes its own "cd",
# and we need to supercede that...
# -----
# Moved path* functions to separate path-magik source
# file to refactor for easier distribution/sharing
# -----

# ===============================================================
# Note: Each function definition includes an "export -f fname" so
#       that these are "global", copied to forked sub-processes
#       and can also be listed by Ruby script lsfunction.rb
# ================================================================

# prototype_func()
#   {  #stuff...
#      # Make the function result echo as a string (the only echo)...
#      echo "func_result"
#   }
# export -f prototype_func
# Use:  var=$( prototype_func )

# =========================
## superman()
##   {
##     command="$@"
##     if [ -z "$command" ]; then
##       command sudo -s
##     else
##       command sudo "$@"
##     fi
##   }
## export -f superman

# Correct way to set IFS to a newline is:
#    IFS=$"\n"   <-- where the leading-$ forces control-char expansion
# not:
#    IFS="\n"    <-- which is just the string "<slash>n"

# ref (reference) -- A thorough look through online help --
#   "man" & "info" pages, shell builtin "help", with last-chance "apropos" --
# usage:  $ ref <topic>
#    or:  $ ref [help|man|info|apropos] <topic> --
ref()
  {
    local topic
    if [ "$1" = "" ]; then
      topic="XYZZY"
    else
      topic="$1"
    fi
    case "$topic" in
      apropos)
        apropos "$2" ;;
      help)
        help "$2" || apropos "$2" ;;
      info)
        info "$2" || help "$2" || apropos "$2" ;;
      man)
        man "$2" || help "$2" || apropos "$2" ;;
      *)
      man "$topic" || help "$topic" || apropos "$topic" ;;
    esac
  }
export -f ref

# Tests current bash status code value $? and displays that result
# use: $ <some_command> ; ExitStatus
ExitStatus()
  {
    GREEN="\e[1;32m"
      RED="\e[1;31m"
     NONE="\e[m"
    es=$?
    if [ $es -eq 0 ]
    then
      echo -e "${GREEN}${es} (success)${NONE}"
    else
      echo -e "${RED}${es} (failure)${NONE}"
    fi
  }
export -f ExitStatus

# '(red)HOSTNAME$ ' prompt, plus preamble 'where' info on preceding line;
# set cmd-continuation prompt to indent/line-up with main prompt.  If
# preamble-prompt is to be realtime (recalculated for each prompt), then
# pass the compute-string as a literal: '`pwd`' or ' {`rvm current`}'
SetPrompt()
  {                           # |/current/working/path {ruby-2.1@gemset}
    local spc='            '  # |hostname$ cmd \
    local hln=${#HOSTNAME}    # |       _$ cmd-cont
    local ind=${spc:0:hln-1}
    export PS1="\[\033[35m\]\n$1$2$3$4$5\[\033[00m\]\n\[\033[0;31m\]${HOSTNAME}\[\033[00m\]\$ "
    export PS2="${ind}_\$ "
  }
export -f SetPrompt

setruby()
{
    if [ "$1" != "" ] ; then
      # Trim the parameter version# to '2.3', '2.2', etc.;
      # that is, remove any leading 'ruby' string:
      v=${1##ruby}
      # Now, can safely specify the --set argument as 'ruby$v'
      sudo ruby-switch --set ruby$v
    fi
    export RUBY_DEFAULT_VERSION=$(ruby -e 'puts "ruby #{RUBY_VERSION}"')
    SetPrompt '`pwd`' ' -- ${RUBY_DEFAULT_VERSION} -- [clock `date +%T`]'
  }
export -f setruby

# =========================

# Pretty-Print a man page --
#        use:  $ ppmanpage topic [printer_name]
# parameters: $1 = the man page topic to print
#             $2 = printer name, or "PDF"|"pdf" to produce PDF-file "$1.pdf"
ppmanpage()
  {
  if [ -n "$2" ]; then
    printer="$2"
  else
    printer="sysprint"   # otherwise, use my personal default printer
  fi

  if [ "$( echo $2 | tr [A-Z] [a-z] )" = "pdf" ]; then   # PDF-formatted?
    man -t $1 | ps2pdf - >"./$1.pdf"
  else
    man -t $1 | lpr -P$printer
  fi
  }
export -f ppmanpage

# Fetch terminal (tty) dimensions (rows columns) --
termdim()
  {
    local dim=$( echo "$1" | tr [A-Z] [a-z] )
    local -i rows=$( stty size | cut --fields=1 --delimiter=' ' )
    local -i cols=$( stty size | cut --fields=2 --delimiter=' ' )
    if [ "${dim}" = "" ] ; then
      echo -en "\033[0;34mTerminal dimensions -- rows: ${rows} cols: ${cols}\033[0m"
    else
      case "${dim}" in
        row* )
          echo "${rows}"
          ;;
        col* )
          echo "${cols}"
          ;;
      esac
    fi
  }
export -f termdim

# Command-recall lister support ("hist" derived from "history"):
hist()
  {
    local -i ln
    if [ -z "$1" ]; then
      # fetch term-size: #rows - 4
      ln=$( termdim rows )
      ln=$(($ln - 4))
    else  # use whatever #lines requested
      ln=$1
    fi
    echo -en "\033[0;34m-----  History of most recent $ln commands -----\033[0m\n"
    history | tail --lines=$ln
  }
export -f hist

# subsystem restarts:
## alias RScups='sudo /etc/init.d/cups restart'
## alias RSsamba='sudo /etc/init.d/samba restart'
restartd()
  { # Subsystem daemons which commonly need restarting:  cups samba ntp pulseaudio rsync ssh tor
    local daemon
    daemon="$@"
    if [ -z "$daemon" ]; then
      echo "usage: $ restartd [ cups | crashplan | samba | ntp | pulseaudio | rsync | ssh | tor | ... ]"
    else
      command sudo /etc/init.d/${daemon} restart
    fi
  }
export -f restartd

# Turn off, or on, the damn fingerpainter touchpad --
tpad()
  {
    cond=$( echo "$*" | tr [A-Z] [a-z] )
    case $cond in
      of* | 0 | - )
        synclient TouchpadOff=1;;
      on* | 1 | + )
        synclient TouchpadOff=0;;
      sho* | sta* )
        echo "%tpad-S-state," $( synclient -l | grep -i "touchpadoff" );;
      * )
        echo "%tpad-I-use, $ tpad [ off | 0 | - | on | 1 | + ]";;
    esac
  }
export -f tpad

distouchpad()
  { # Disable/re-control the damn touchpad -- no fingerpainting!
    local sd
    local pid
    local carg
    local darg="-d -i 86400 -K -R" # wait all day to reenable touchpad
    local re=""
    echo "%distouchpad-I syndaemon on host: $HOSTNAME"
    # Get the ps (system's) process entry for the syndaemon,
    # extract that process's pid (2nd field), and extract the
    # com-line args for that process (remainder after "syndaemon");
    # establish the desired (re)start arguments (darg):
      sd=$( ps aux | grep [s]yndaemon )
     pid=$( echo "${sd}" | \
            ruby -e 'puts gets.to_s.split[1]' )
    carg=$( echo "${sd}" | \
            ruby -e 'puts gets.to_s.split("syndaemon")[1].to_s.strip.rstrip' )
    if [ "$pid" != "" ]; then          # a syndaemon already's running...
      if [ "$carg" != "$darg" ]; then  # and doesn't have the right args...
        re="re"
        carg=""
        kill -kill $pid                # so kill that one...
        sleep 1                        # wait a sec to settle
      fi
    fi
    if [ "$carg" != "$darg" ]; then
      syndaemon $darg                    # (re)start syndaemon...
      if [ $? = 0 ]; then
        echo "%distouchpad-S syndaemon ${re}started..." >&2
      fi
    fi
    ps aux | grep [s]yndaemon
  }
export -f distouchpad
# =========================

# =========================
# A simple line-numbered text-file lister with pagination:
list()
  {
    cat -vn $1 | less
  }
export -f list

# Start a text-editor as sudo/root --
sysedit()
  {
    ed='atom'   # want to use Atom...
    ## ed='subl'   # want to use Sublime Text...
    dpkg-query --show 2>/dev/null 1>/dev/null ${ed}
    if [ $? != 0 ]; then
      ed='gedit'  # ...but will settle for default editor
    fi
    if [ "$1" != "" ]; then
      ans="$1"
    else
      echo -n "System file to edit: "; read ans
    fi
    case $ed in
      atom )
        sudo atom ${ans} ;;
      subl )
        sudo subl ${ans} ;;
      gedit )
        gksudo -- gedit ${ans} ;;
    esac
  }
export -f sysedit

# Run ~/bin/autoinstall as sudo/root, prompting for PIF --
# Use: $ sysintstall [-options] ['package']...
sysinstall()
  {
    pif=$( echo ./P*.list )  # glob onto first matching file, if any...
    echo -en "Package file (${pif}): "; read ans
    if [ "$ans" != "" ]; then
      pif=ans
    fi
    sudo $HOME/bin/autoinstall --pif=${pif} $*
  }
export -f sysinstall

lsppa()
  { # Derived from webupd8.org/2012/12/how-to-list-packages-from-ppa.html
    # by Alin Andrei (Andrew)
    #  use: $ lsppa ppa-source [pkgname]
    # e.g.: $ lsppa webupd8 sublime
    if [ "$2" != "" ]; then
      ppaf="*${1}*${2}*"
    else
      ppaf="*${1}*"
    fi
    ppafile="/var/lib/apt/lists/${ppaf}Packages"
    # Globbing is weird!  echo "/var/foobar/*" will just print "/var/foobar/*"
    #   (the original string with wildcards) when file-not-found...
    if [ "$( echo "${ppafile}" )" != "${ppafile}" ]; then
      awk '$1 == "Package:" { if (a[$2]++ == 0) print $2; }' ${ppafile}
      return 0  # success (as per dpkg-query)
    else
      echo "%lsppa-E-FNF, file '${ppafile}' not found"
      return 1  # fail (as per dpkg-query)
    fi
  }
export -f lsppa

# =========================

# Display only last field from squeezed-split-fields line:
lastfield()
  {
  ruby -ne 'f = $_.tr("\t"," ").squeeze(" ").split; puts "#{f[-1]}"'
  }
export -f lastfield

# Display only filespec (filename fields from standard find output-line):
fnamefield()
  {
  ruby -ne 'f = $_.tr("\t"," ").squeeze(" ").split; puts "#{f[10..-1].join(" ")}"'
  }
export -f fnamefield

# a VMS-like listing from find:
fdir()
  {
    path=""
    if [ "$1" != "" ] ; then
      path="$1"
    else
      path='./'
    fi
    fname=""
    if [ "$2" != "" ] ; then
      fname="-name '$2'"
    fi
    # TO-DO: Add options-parse for cmd-line -opt for datetime, size, owner, prot-mask
    #        and detection/sensitivity to current terminal screen width...
    #        Could also sort by-date, by-size, reverse (etc)
    fstr="%-32f %10s·%-6b %Td-%Tb-%TY %Tk:%TM %u:%g %M"
    find "${path}" -maxdepth 1 -type f ${fname} -printf "${fstr}\n" | sort
  }
export -f fdir

# ls-type functions:
ff()
  { # Find a literally-named file from local directory recursively below current-dir:
      sudo find . -iname "$*" -type f -ls | fnamefield
    # ...same as:
    #    sudo find . -iname "$*" -type f -printf "%p\n"    ## %p = filename
  }
export -f ff

fe()
  { # Find a file with pattern $1 in name and execute $2 on it
    find . -type f -iname '*'"$1"'*' -exec "${2:-file}" {} \; ;
  }
export -f fe

fp()
  { # Find a pattern-named file from local directory recursively below
    find . -type f -iname '*'"$*"'*' -ls ;
  }
export -f fp

lf()
  { ls -1p $@ | grep -v '\/$' ;
  }
export -f lf

# Advanced ls function
# Counts files, subdirectories and directory size and displays details
# about files depending on the available space
lls()
  {
    local rows
    local files
    # count files
    echo -n "<`find . -maxdepth 1 -mindepth 1 -type f | wc -l | tr -d '[:space:]'` files>"
    # count sub-directories
    echo -n " <`find . -maxdepth 1 -mindepth 1 -type d | wc -l | tr -d '[:space:]'` dirs/>"
    # count links
    echo -n " <`find . -maxdepth 1 -mindepth 1 -type l | wc -l | tr -d '[:space:]'` links@>"
    # total disk space used by this directory and all subdirectories
    echo " <~`du -sh . 2> /dev/null | cut -f1`>"
    rows=$( stty size | cut -d' ' -f1 )
    files=$( find . -maxdepth 1 -mindepth 1 |
             wc -l | tr -d '[:space:]' )
    # if the terminal has enough lines, do a long listing
    if [ $( expr "${rows}" - 6 ) -lt "${files}" ]; then
        ls
    else
        ls -hlAF
    fi
  }
export -f lls
# =========================

# sshfs remote mount-point functions:
# sshfs name@server:/path/to/folder /path/to/mount/point
# fusermount -u /path/to/mount/point

# =========================
# Inserts a flag with the specified content
# Usage: flag "comment"; If no comment, inserts the date
flag()
  {
    if [ "$1" = "" ];
    then
        echo -e "\033[0;31m[====== " $(date +"%A %e %B %Y"), $(date +"%R") " ======]\033[0m"
    else
        echo -e "\033[0;31m[====== " $@ " ======]\033[0m"
    fi
  }
export -f flag

# Inserts a flag and executes command:
# Usage: doflag "command"
doflag()
  {
    if [ "$1" = "" ];
    then
        return
    else
        flag; flag $@
        command $@
        echo -e "\033[0;31m[============]\033[0m"
    fi
  }
export -f doflag

lcfname()
  {
    local file
    local filename
    local dirnam
    local nf
    local newname
    for file ; do
        filename=${file##*/}
        case "$filename" in
          */*) dirname=${file%/*} ;;
            *) dirname=. ;;
        esac
        nf=$( echo $filename | tr [A-Z] [a-z] )
        newname="${dirname}/${nf}"
        if [ "$nf" != "$filename" ]; then
            mv "$file" "$newname"
            echo "lowercase: $file --> $newname" >&2
        else
            echo "lowercase: $file not changed" >&2
        fi
    done
  }
export -f lcfname
# =========================

# =========================
ask()
  {
    local ans
    echo -n "$@" '[y/n] ' ; read ans
    case "$ans" in
        y*|Y*) return 0 ;;
            *) return 1 ;;
    esac
  }
export -f ask

extract()
  {
   if [ -f "$1" ] ; then
     case "$1" in
       *.tar.bz2) tar -xjf "$1"   ;;
       *.tar.gz)  tar -xzf "$1"   ;;
       *.bz2)     bunzip2 "$1"    ;;
       *.rar)     rar -x "$1"     ;;
       *.gz)      gunzip "$1"     ;;
       *.tar)     tar -xf "$1"    ;;
       *.tbz2)    tar -xjf "$1"   ;;
       *.tgz)     tar -xzf "$1"   ;;
       *.zip)     unzip "$1"      ;;
       *.Z)       uncompress "$1" ;;
       *.7z)      7z -x "$1"      ;;
       *)         echo "'$1' cannot be extracted via extract()" >&2 ;;
     esac
   else
     echo "'$1' is not a valid file" >&2
   fi
  }
export -f extract

netinfo()
  {
    local myip
    echo "--------------- Network Information ---------------"
    /sbin/ifconfig | awk '/inet addr/ {print $2}'
    /sbin/ifconfig | awk '/inet6 addr/ {print $3}'
    /sbin/ifconfig | awk '/Bcast/ {print $3}'
    /sbin/ifconfig | awk '/Mask/ {print $4}'
    /sbin/ifconfig | awk '/HWaddr/ {print $4,$5}'
    myip=$( lynx -dump -hiddenlinks=ignore -nolist http://checkip.dyndns.org:8245/ | sed '/^$/d; s/^[ ]*//g; s/[ ]*$//g' )
    echo "${myip}"
    echo "---------------------------------------------------"
  }
export -f netinfo

# =========================
# Define a word - USAGE: define dog
### define()
###   {
###     local response
###     lynx -dump "http://www.google.com/search?hl=en&q=define%3A+${1}&btnG=Google+Search" | grep -m 3 -w "*"  | sed 's/;/ -/g' | cut -d- -f1 > /tmp/templookup.txt
###       if [[ -s  /tmp/templookup.txt ]] ;then
###         until ! read response
###           do
###           echo "${response}"
###           done < /tmp/templookup.txt
###         else
###           echo "Sorry, cannot find term \"${1}\"" >&2
###       fi
###     \rm -f /tmp/templookup.txt
###   }
### export -f define
# =========================

# =========================  (some currently unused ones, as exemplars or for future use):
### # clock - A bash clock that can run in your terminal window.
### clock()
###   {
###     while true; do clear; echo "==========="; date +"%r"; echo "==========="; sleep 1; done
###   }
### export -f clock

### pg()
###   {
###     if pgrep -f $@ > /dev/null;
###     then
###         pgrep -f $@ | xargs ps -o user,pid,stat,rss,vsz,pcpu,args \
###                                --sort -pcpu,-rss;
###     else
###         exit 1;
###     fi
###   }
### export -f pg
# =========================

## Z Shell - zsh - functions only:

# Is this shell a 'login shell'?
loginshell()
  {
    local login
    local inter
    if [[ -o login ]]; then
      login="Login"
    else
      login="Non-login"
    fi
    if [[ -o interactive ]]; then
      inter="Interactive"
    else
      inter="Non-interactive"
    fi
    echo "Shell is ${login} ${inter}"
  }
  export -f loginshell

# exit 0
